// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package config

import (
	"github.com/gin-gonic/gin"
	"github.com/featx/keys-gin/web/db"
	"github.com/featx/keys-gin/web/handler"
	"github.com/featx/keys-gin/web/service"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序，提供依赖注入
func InitializeApp() (*gin.Engine, error) {
	xormEngine, err := db.GetEngine()
	if err != nil {
		return nil, err
	}
	keyService, err := service.NewKeyService(xormEngine)
	if err != nil {
		return nil, err
	}
	transactionService, err := service.NewTransactionService(xormEngine, keyService)
	if err != nil {
		return nil, err
	}
	keyHandler, err := handler.NewKeyHandler(keyService)
	if err != nil {
		return nil, err
	}
	transactionHandler, err := handler.NewTransactionHandler(transactionService)
	if err != nil {
		return nil, err
	}
	ginEngine := ProvideRouter(keyHandler, transactionHandler)
	return ginEngine, nil
}

// ProvideRouter 创建并配置Gin路由器
func ProvideRouter(
	keyHandler *handler.KeyHandler,
	transactionHandler *handler.TransactionHandler,
) *gin.Engine {
	router := gin.Default()
	
	// 注册路由
	keyHandler.RegisterRoutes(router)
	transactionHandler.RegisterRoutes(router)
	
	// 添加健康检查端点
	router.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{"status": "ok"})
	})
	
	return router
}